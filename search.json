[
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Insightful Analytics",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nSpotify Post\n\n\n\n\n\n\n\n\nMar 1, 2025\n\n\nWill AKin\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nWeb-Scraping Christmas Movies\n\n\n\n\n\n\n\n\nFeb 14, 2025\n\n\nWill Akin\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nPyhton Basics\n\n\n\n\n\n\n\n\nFeb 14, 2025\n\n\nWill Akin\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nStarwars\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYour Name\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "pandas_basics.html#creating-a-series",
    "href": "pandas_basics.html#creating-a-series",
    "title": "Pandas Basics",
    "section": "Creating a Series",
    "text": "Creating a Series\n\n\n# Creating a Series from a list\ndata = [10, 20, 30, 40, 50]\nseries = pd.Series(data)\nseries\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n10\n\n\n1\n20\n\n\n2\n30\n\n\n3\n40\n\n\n4\n50\n\n\n\n\ndtype: int64"
  },
  {
    "objectID": "pandas_basics.html#creating-a-dataframe",
    "href": "pandas_basics.html#creating-a-dataframe",
    "title": "Pandas Basics",
    "section": "Creating a DataFrame",
    "text": "Creating a DataFrame\n\n\n# Creating a DataFrame from a dictionary\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"City\": [\"New York\", \"Los Angeles\", \"Chicago\"]\n}\ndf = pd.DataFrame(data)\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n0\nAlice\n25\nNew York\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#exploring-data",
    "href": "pandas_basics.html#exploring-data",
    "title": "Pandas Basics",
    "section": "Exploring Data",
    "text": "Exploring Data\n\n\n# Display the first few rows\ndf.head()\n\n# Display the shape of the DataFrame\nprint(\"Shape:\", df.shape)\n\n# Display summary statistics\ndf.describe()\n\nShape: (3, 3)\n\n\n\n  \n    \n\n\n\n\n\n\nAge\n\n\n\n\ncount\n3.0\n\n\nmean\n30.0\n\n\nstd\n5.0\n\n\nmin\n25.0\n\n\n25%\n27.5\n\n\n50%\n30.0\n\n\n75%\n32.5\n\n\nmax\n35.0"
  },
  {
    "objectID": "pandas_basics.html#selecting-data",
    "href": "pandas_basics.html#selecting-data",
    "title": "Pandas Basics",
    "section": "Selecting Data",
    "text": "Selecting Data\n\n# Selecting a single column\ndf[\"Name\"]\n\n\n\n\n\n\n\n\nName\n\n\n\n\n0\nAlice\n\n\n1\nBob\n\n\n2\nCharlie\n\n\n\n\ndtype: object\n\n\n\n# Selecting multiple columns\ndf[[\"Name\", \"City\"]]\n\n\n  \n    \n\n\n\n\n\n\nName\nCity\n\n\n\n\n0\nAlice\nNew York\n\n\n1\nBob\nLos Angeles\n\n\n2\nCharlie\nChicago\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n# Selecting rows by index\ndf.iloc[0]\n\n\n\n\n\n\n\n\n0\n\n\n\n\nName\nAlice\n\n\nAge\n25\n\n\nCity\nNew York\n\n\n\n\ndtype: object"
  },
  {
    "objectID": "pandas_basics.html#filtering-data",
    "href": "pandas_basics.html#filtering-data",
    "title": "Pandas Basics",
    "section": "Filtering Data",
    "text": "Filtering Data\n\n# Filtering rows where Age is greater than 25\nfiltered_df = df[df[\"Age\"] &gt; 25]\nfiltered_df\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#adding-a-new-column",
    "href": "pandas_basics.html#adding-a-new-column",
    "title": "Pandas Basics",
    "section": "Adding a New Column",
    "text": "Adding a New Column\n\n\n# Adding a new column\ndf[\"Salary\"] = [50000, 60000, 70000]\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\nSalary\n\n\n\n\n0\nAlice\n25\nNew York\n50000\n\n\n1\nBob\n30\nLos Angeles\n60000\n\n\n2\nCharlie\n35\nChicago\n70000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n    ## Conclusion\n\n    This notebook covers the basic operations of pandas. You can explore more advanced features like merging,\n    joining, and working with time series data in pandas documentation: https://pandas.pydata.org/docs/"
  },
  {
    "objectID": "Danl_210_Project_Akin_Will_stock_ESG.html",
    "href": "Danl_210_Project_Akin_Will_stock_ESG.html",
    "title": "Ungrouped Descriptive Statistics for ESG Data",
    "section": "",
    "text": "#Title: ESG Data Analysis\n# This is formatted as code\n#Introduction:\n#Background\n\n#An ESG rating evaluates each company's overall risk to sustainablity measures.  Theses sustainablity measures include: long-term governmental, environmenta, and societal risks.\n#A company can analyze its ESG rating in order to make efficient revisions and conservable measures in order to reinforce sustainability.\n#Sustainability has become a significant portion of business, that promotes the efficiency of resource allegation.\n\n#Statement of the Problem: How does ESG rating differ between Countries and Sectors of businesses?\n\n#How does Average ESG rating differ between Sectors of businesses?\n#What business  3 Sectors have the top Controversy Levels?\n#How does each country contribute to ESG by business Sector?\n\n#Data Collection\n\n#One can collect data through Anaconda, utilizing Spyder.\n\n\n#To scrape websites using Selenium, one should first provide import statements being utilized throughout the code.\n\n#Next, One should utilize driver to open the designated url and scrape the data from Chrome\n\n#Once the webpage is intitialized, utilized find_elements to extract data points.  One can find elements by name, class name, tagname, XPath, id, link text, partial link text, or css selector.\n\n#One should then create a for loop incorporatind find_elements to scrap elements into a data frame\n\n#After scraping is complete, one should merge or concat the data frames into one.\n\n#One should additionally clean data frame for proper analysis\n\n#Descriptive Statistics\n\nimport pandas as pd\nimport seaborn as sns\nurl_2024 = \"https://bcdanl.github.io/data/esg_proj_2024_data.csv\"\nesg_proj_2024_data = pd.read_csv(url_2024)\n\n\nurl = \"https://bcdanl.github.io/data/stock_history_2023.csv\"\nstock_history_2023 = pd.read_csv(url)\n\n\nUngrouped Descriptive Statistics for ESG Data\n\noverall_stats_esg = esg_proj_2024_data.describe()\noverall_stats_esg\n\n\n  \n    \n\n\n\n\n\n\nYear\nMarket_Cap\nIPO_Year\nTotal_ESG\nEnvironmental\nSocial\nGovernance\nControversy\n\n\n\n\ncount\n625.0\n6.250000e+02\n201.000000\n625.000000\n602.000000\n602.000000\n602.000000\n573.000000\n\n\nmean\n2024.0\n7.244169e+10\n2000.179104\n21.567040\n5.747342\n9.017774\n6.819103\n1.942408\n\n\nstd\n0.0\n2.286855e+11\n12.697549\n7.041637\n5.200518\n3.567490\n2.371114\n0.801113\n\n\nmin\n2024.0\n1.986640e+08\n1925.000000\n6.400000\n0.000000\n0.800000\n2.400000\n0.000000\n\n\n25%\n2024.0\n1.117340e+10\n1994.000000\n16.300000\n1.800000\n6.700000\n5.225000\n1.000000\n\n\n50%\n2024.0\n2.439046e+10\n2000.000000\n21.100000\n3.950000\n8.900000\n6.300000\n2.000000\n\n\n75%\n2024.0\n5.961247e+10\n2009.000000\n26.000000\n8.875000\n11.175000\n7.900000\n2.000000\n\n\nmax\n2024.0\n3.019130e+12\n2022.000000\n52.000000\n25.300000\n22.500000\n19.400000\n5.000000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n#Grouped Descriptive Statistics for ESG Data\n\ngrouped_stats_esg = esg_proj_2024_data.groupby('Sector').describe()\ngrouped_stats_esg\n\n\n  \n    \n\n\n\n\n\n\nYear\nMarket_Cap\n...\nGovernance\nControversy\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\ncount\nmean\n...\n75%\nmax\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nSector\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBasic Materials\n8.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n8.0\n4.152917e+10\n...\n6.025\n7.5\n7.0\n2.714286\n1.112697\n1.0\n2.00\n3.0\n3.50\n4.0\n\n\nConsumer Discretionary\n152.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n152.0\n6.275165e+10\n...\n6.700\n10.6\n147.0\n1.972789\n0.661521\n0.0\n2.00\n2.0\n2.00\n4.0\n\n\nConsumer Staples\n22.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n22.0\n5.256891e+10\n...\n5.575\n9.5\n22.0\n2.590909\n0.590326\n2.0\n2.00\n3.0\n3.00\n4.0\n\n\nEnergy\n25.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n25.0\n7.331996e+10\n...\n7.975\n10.4\n24.0\n2.041667\n0.750604\n1.0\n1.75\n2.0\n3.00\n3.0\n\n\nFinance\n95.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n95.0\n4.896501e+10\n...\n11.775\n19.4\n90.0\n1.800000\n0.796058\n1.0\n1.00\n2.0\n2.00\n5.0\n\n\nHealth Care\n57.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n57.0\n8.558134e+10\n...\n8.425\n11.6\n57.0\n2.245614\n0.851064\n1.0\n2.00\n2.0\n3.00\n5.0\n\n\nIndustrials\n95.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n95.0\n3.620958e+10\n...\n7.100\n10.3\n83.0\n1.891566\n0.811684\n0.0\n1.00\n2.0\n2.00\n4.0\n\n\nReal Estate\n42.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n42.0\n2.315503e+10\n...\n6.300\n10.1\n28.0\n1.142857\n0.448395\n0.0\n1.00\n1.0\n1.00\n2.0\n\n\nTechnology\n71.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n71.0\n2.263839e+11\n...\n6.600\n11.5\n59.0\n1.745763\n0.842681\n0.0\n1.00\n2.0\n2.00\n4.0\n\n\nTelecommunications\n16.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n16.0\n6.773631e+10\n...\n7.400\n8.8\n16.0\n2.000000\n0.730297\n1.0\n1.75\n2.0\n2.25\n3.0\n\n\nUtilities\n42.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n42.0\n3.135210e+10\n...\n5.700\n7.3\n40.0\n2.100000\n0.841244\n1.0\n2.00\n2.0\n2.00\n5.0\n\n\n\n\n11 rows × 64 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=esg_proj_2024_data, x='Sector', hue='Sector', bins=20, multiple='stack')\nplt.title('ESG Score Distribution by Sector (Histogram)')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\nUngrouped Descriptive Statistics for Stock Data\n\noverall_stats_stock = stock_history_2023.describe()\noverall_stats_stock\n\n\n  \n    \n\n\n\n\n\n\nYear\nOpen\nHigh\nLow\nClose\nVolume\nDividend\nStock_Splits\n\n\n\n\ncount\n157750.0\n157750.000000\n157750.000000\n157750.000000\n157750.000000\n1.577500e+05\n157750.000000\n157750.000000\n\n\nmean\n2023.0\n138.386432\n139.868734\n136.982792\n138.463043\n4.831341e+06\n0.008351\n0.000121\n\n\nstd\n0.0\n303.569315\n306.850465\n300.707721\n303.837231\n2.183286e+07\n0.134062\n0.013334\n\n\nmin\n2023.0\n1.030000\n1.060000\n0.780000\n0.980000\n0.000000e+00\n0.000000\n0.000000\n\n\n25%\n2023.0\n39.326417\n39.799928\n38.896336\n39.342437\n8.251000e+05\n0.000000\n0.000000\n\n\n50%\n2023.0\n79.447571\n80.300088\n78.523761\n79.422333\n1.694200e+06\n0.000000\n0.000000\n\n\n75%\n2023.0\n146.473485\n147.876977\n144.995217\n146.545551\n3.867075e+06\n0.000000\n0.000000\n\n\nmax\n2023.0\n7028.500000\n7075.000000\n6997.910156\n7024.819824\n1.543911e+09\n35.000000\n2.000000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n#Grouped Descriptive Statistics for Stock Data\n\ngrouped_stats_stock = stock_history_2023.groupby('Stock_Splits').describe()\ngrouped_stats_stock\n\n\n  \n    \n\n\n\n\n\n\nYear\nOpen\n...\nVolume\nDividend\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\ncount\nmean\n...\n75%\nmax\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nStock_Splits\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0.000\n157736.0\n2023.0\n0.0\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n157736.0\n138.392003\n...\n3866958.0\n1.543911e+09\n157736.0\n0.008322\n0.133513\n0.000\n0.000\n0.000\n0.000\n35.000\n\n\n0.963\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n128.777257\n...\n356400.0\n3.564000e+05\n1.0\n4.845000\nNaN\n4.845\n4.845\n4.845\n4.845\n4.845\n\n\n1.021\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n51.747517\n...\n1800700.0\n1.800700e+06\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n1.046\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n36.780717\n...\n1535500.0\n1.535500e+06\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n1.065\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n53.657972\n...\n7357100.0\n7.357100e+06\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n1.128\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n217.839992\n...\n6387700.0\n6.387700e+06\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n1.136\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n43.672893\n...\n4326600.0\n4.326600e+06\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n1.164\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n202.701564\n...\n998900.0\n9.989000e+05\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n1.281\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n54.164016\n...\n21031104.0\n2.103110e+07\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n1.385\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n25.075378\n...\n6372400.0\n6.372400e+06\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n1.457\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n10.866301\n...\n10459795.0\n1.045980e+07\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n1.500\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n69.574287\n...\n3029700.0\n3.029700e+06\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n2.000\n3.0\n2023.0\n0.0\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n3.0\n54.623190\n...\n3262950.0\n3.608500e+06\n3.0\n0.000000\n0.000000\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n\n\n13 rows × 56 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=stock_history_2023, x='Stock_Splits', hue='Stock_Splits', bins=10, multiple='stack')\nplt.title('Distribution by Stock Splits (Histogram)')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n#Exploratory Data Analysis\n#How does Average ESG rating differ between Sectors of businesses?\n\ngra = esg_proj_2024_data.groupby('Sector').agg(\n    av_esg = (\"Total_ESG\", \"mean\")\n)\ngra\n\n\n  \n    \n\n\n\n\n\n\nav_esg\n\n\nSector\n\n\n\n\n\nBasic Materials\n21.750000\n\n\nConsumer Discretionary\n19.588158\n\n\nConsumer Staples\n26.359091\n\n\nEnergy\n32.788000\n\n\nFinance\n21.754737\n\n\nHealth Care\n22.815789\n\n\nIndustrials\n23.678947\n\n\nReal Estate\n13.880952\n\n\nTechnology\n18.129577\n\n\nTelecommunications\n20.406250\n\n\nUtilities\n26.547619\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nsns.set(style='whitegrid')\n\nsns.barplot(data=gra, x='Sector',\n            y='av_esg',\n            estimator='mean',\n            ci='sd',\n            hue = 'Sector')  # ci='sd' shows standard deviation bars\nplt.title('Average ESG Score by Sector')\nplt.xticks(rotation=45)  # rotate if sector names are long\nplt.tight_layout()\n\nFutureWarning: \n\nThe `ci` parameter is deprecated. Use `errorbar='sd'` for the same effect.\n\n  sns.barplot(data=gra, x='Sector',\n\n\n\n\n\n\n\n\n\n#When looking at the data by Sector, on average, Energy businesses obtain the highest ESG score. On the other hand, Real Estate businesses obtain the lowest average ESG Score.\n#What business 3 Sectors have the top Controversy Levels?\n\ncontroversy = esg_proj_2024_data.groupby('Sector')['Controversy'].max()\n\ntop_3_controversy_sectors = controversy.nlargest(3)\ntop_3_controversy_sectors\n\n\n\n\n\n\n\n\nControversy\n\n\nSector\n\n\n\n\n\nFinance\n5.0\n\n\nHealth Care\n5.0\n\n\nUtilities\n5.0\n\n\n\n\ndtype: float64\n\n\n\ncontroversy_df = controversy.reset_index()\n\nsns.barplot(data=controversy_df,\n            x='Sector',\n            y='Controversy',\n            hue = 'Sector')\nplt.title('Maximum Controversy by Sector') # Added a title for clarity\nplt.xticks(rotation=45)  # rotate if sector names are long\nplt.tight_layout()\nplt.show() # Added plt.show() to display the plot\n\n\n\n\n\n\n\n\n#The Top 3 business sectors with the highest Controversery ratings are Finanance, Health Care, and Utilities.\n#How does each country contribute to ESG by business Sector?\n\ncountry = esg_proj_2024_data.groupby(['Country', 'Sector']).size()\ncountry\n\n\n\n\n\n\n\n\n\n0\n\n\nCountry\nSector\n\n\n\n\n\nBermuda\nConsumer Discretionary\n1\n\n\nFinance\n5\n\n\nCanada\nBasic Materials\n4\n\n\nConsumer Discretionary\n5\n\n\nConsumer Staples\n1\n\n\nEnergy\n6\n\n\nFinance\n7\n\n\nHealth Care\n1\n\n\nIndustrials\n4\n\n\nReal Estate\n1\n\n\nTechnology\n1\n\n\nTelecommunications\n3\n\n\nUtilities\n3\n\n\nCayman Islands\nHealth Care\n1\n\n\nChina\nConsumer Discretionary\n2\n\n\nReal Estate\n2\n\n\nTechnology\n1\n\n\nFrance\nEnergy\n1\n\n\nGermany\nFinance\n1\n\n\nGuernsey\nTechnology\n1\n\n\nHong Kong\nConsumer Discretionary\n2\n\n\nIreland\nConsumer Discretionary\n1\n\n\nHealth Care\n1\n\n\nIndustrials\n1\n\n\nTechnology\n3\n\n\nIsrael\nIndustrials\n1\n\n\nTechnology\n1\n\n\nItaly\nConsumer Discretionary\n1\n\n\nNetherlands\nConsumer Discretionary\n1\n\n\nHealth Care\n1\n\n\nIndustrials\n2\n\n\nTechnology\n1\n\n\nPeru\nFinance\n1\n\n\nSingapore\nTechnology\n1\n\n\nSpain\nTelecommunications\n1\n\n\nSweden\nConsumer Discretionary\n1\n\n\nSwitzerland\nEnergy\n1\n\n\nFinance\n1\n\n\nIndustrials\n4\n\n\nUnited Kingdom\nConsumer Discretionary\n1\n\n\nFinance\n1\n\n\nTelecommunications\n1\n\n\nUnited States\nBasic Materials\n4\n\n\nConsumer Discretionary\n136\n\n\nConsumer Staples\n21\n\n\nEnergy\n17\n\n\nFinance\n78\n\n\nHealth Care\n53\n\n\nIndustrials\n83\n\n\nReal Estate\n39\n\n\nTechnology\n62\n\n\nTelecommunications\n11\n\n\nUtilities\n39\n\n\n\n\ndtype: int64\n\n\n\ncountry = esg_proj_2024_data.groupby(['Country', 'Sector']).size().reset_index(name='Count')\n\nplt.figure(figsize=(12, 6))\nsns.barplot(data=country,\n            x='Sector',\n            y='Count',\n            hue='Country')\n\nplt.title('Observations per Country by Sector')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n#As shown by the graph, the United States contains the most businesses and businesses sectors across the data frame.\n#Signifigance of the Project\n#One can utilze these data findings to see on a global scale, which countries are contibuting most to high ESG. Additionally, one can further evalute which business sectors in each country need priortizing towards their ESG score.\n#References\n\n# Yahoo Finance  https://finance.yahoo.com/\n# Utilized Chatgpt to make graphs more appealing"
  },
  {
    "objectID": "seaborn_basics.html",
    "href": "seaborn_basics.html",
    "title": "Seaborn Example",
    "section": "",
    "text": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Sample data\ndata = {\n    'Category': ['A', 'B', 'C', 'D'],\n    'Values': [23, 45, 56, 78]\n}\ndf = pd.DataFrame(data)\n\n# Create a barplot\nsns.set(style=\"whitegrid\")  # Optional: Set a clean grid style\nplt.figure(figsize=(8, 6))  # Set the figure size\nsns.barplot(data=df, x='Category', y='Values', palette='viridis')\n\n# Customize the plot\nplt.title(\"Bar Plot Example\", fontsize=16)\nplt.xlabel(\"Category\", fontsize=12)\nplt.ylabel(\"Values\", fontsize=12)\n\n# Show the plot\nplt.show()\n\nFutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df, x='Category', y='Values', palette='viridis')"
  },
  {
    "objectID": "posts/starwars/starwars_df.html",
    "href": "posts/starwars/starwars_df.html",
    "title": "Starwars",
    "section": "",
    "text": "Let’s analyze the starwars data:\nstarwars &lt;- read_csv(\"https://bcdanl.github.io/data/starwars.csv\")"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "href": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "title": "Starwars",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#human-vs.-droid",
    "href": "posts/starwars/starwars_df.html#human-vs.-droid",
    "title": "Starwars",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/holiday post/Danl_210_HW_3.html",
    "href": "posts/holiday post/Danl_210_HW_3.html",
    "title": "Web-Scraping Christmas Movies",
    "section": "",
    "text": "#My favorite Christmas movie is Elf\n#Use code in spyder to open data frame\n\nimport pandas as pd\nholiday_movies = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movies.csv\")\nlen(holiday_movies)\n\n2265\n\n\n#Use code to open url through Chrome\n\nfrom selenium import webdriver  # Main module to control the browser\nfrom selenium.webdriver.common.by import By  # Helps locate elements on the webpage\nfrom selenium.webdriver.chrome.options import Options  # Allows setting browser options\n#from selenium.webdriver.support.ui import WebDriverWait\n#from selenium.webdriver.support import expected_conditions as EC\n#import time\n#import DataFrame as df\n\noptions = Options()\noptions.add_argument(\"window-size=1400,1200\")\n\ndriver = webdriver.Chrome(options=options)\nurl = \"\"https://bcdanl.github.io/data/holiday_movies.csv\"\"\ndriver.get(url)\n\n#Use these variables to analyze data\n\n# tconst\n# title_type\n# primary_title\n# simple_title\n# year\n# runtime_minutes\n# average_rating\n# num_votes\n\n#HW 5\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nholiday_movies = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movies.csv\")\nholiday_movies\n\n\n  \n    \n\n\n\n\n\n\ntconst\ntitle_type\nprimary_title\nsimple_title\nyear\nruntime_minutes\naverage_rating\nnum_votes\n\n\n\n\n0\ntt0020356\nmovie\nSailor's Holiday\nsailors holiday\n1929\n58.0\n5.4\n55\n\n\n1\ntt0020823\nmovie\nThe Devil's Holiday\nthe devils holiday\n1930\n80.0\n6.0\n242\n\n\n2\ntt0020985\nmovie\nHoliday\nholiday\n1930\n91.0\n6.3\n638\n\n\n3\ntt0021268\nmovie\nHoliday of St. Jorgen\nholiday of st jorgen\n1930\n83.0\n7.4\n256\n\n\n4\ntt0021377\nmovie\nSin Takes a Holiday\nsin takes a holiday\n1930\n81.0\n6.1\n740\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2260\ntt9747440\ntvMovie\nA Christmas Love Story\na christmas love story\n2019\n84.0\n6.9\n1652\n\n\n2261\ntt9747450\ntvMovie\nHoliday for Heroes\nholiday for heroes\n2019\n81.0\n7.0\n1655\n\n\n2262\ntt9802890\ntvMovie\nChristmas Jars\nchristmas jars\n2019\n93.0\n7.3\n914\n\n\n2263\ntt9815084\ntvMovie\nA Very British Christmas\na very british christmas\n2019\n90.0\n5.7\n725\n\n\n2264\ntt9892854\ntvMovie\n#Xmas\nxmas\n2022\n84.0\n5.8\n926\n\n\n\n\n2265 rows × 8 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\ngenres = holiday_movies['title_type'].value_counts().head(5)\ngenres\n\n\n\n\n\n\n\n\ncount\n\n\ntitle_type\n\n\n\n\n\ntvMovie\n1206\n\n\nmovie\n800\n\n\nvideo\n259\n\n\n\n\ndtype: int64\n\n\n\nholiday_movies['log_num_votes'] = np.log(holiday_movies['num_votes'])\n\n\n(\n sns.FacetGrid(\n       data = holiday_movies,\n       row='num_votes',\n       col='average_rating')\n .map(sns.histplot, 'title_type')\n )"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code with no space in the folder name.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/py-basic/danl_210_python_basic.html",
    "href": "posts/py-basic/danl_210_python_basic.html",
    "title": "Pyhton Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')\n\nHello, World!\n\n\n\n\n\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5\n\n\n\n\n\nPython supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')\n\nFive is greater than two!\n\n\n\n\n\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()\n\nHello from a function\n\n\n\n\n\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "posts/py-basic/danl_210_python_basic.html#what-is-python",
    "href": "posts/py-basic/danl_210_python_basic.html#what-is-python",
    "title": "Pyhton Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')\n\nHello, World!"
  },
  {
    "objectID": "posts/py-basic/danl_210_python_basic.html#variables-and-data-types",
    "href": "posts/py-basic/danl_210_python_basic.html#variables-and-data-types",
    "title": "Pyhton Basics",
    "section": "",
    "text": "In Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "posts/py-basic/danl_210_python_basic.html#control-structures",
    "href": "posts/py-basic/danl_210_python_basic.html#control-structures",
    "title": "Pyhton Basics",
    "section": "",
    "text": "Python supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')\n\nFive is greater than two!"
  },
  {
    "objectID": "posts/py-basic/danl_210_python_basic.html#functions",
    "href": "posts/py-basic/danl_210_python_basic.html#functions",
    "title": "Pyhton Basics",
    "section": "",
    "text": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()\n\nHello from a function"
  },
  {
    "objectID": "posts/py-basic/danl_210_python_basic.html#lists-and-dictionaries",
    "href": "posts/py-basic/danl_210_python_basic.html#lists-and-dictionaries",
    "title": "Pyhton Basics",
    "section": "",
    "text": "A list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "posts/spotify-post/spotifypost.html",
    "href": "posts/spotify-post/spotifypost.html",
    "title": "Spotify Post",
    "section": "",
    "text": "#My Favorite Spotify Artist\n##My favority spotify artist is Taylor Swift. I went to the Eras Tour in 2023! My other favorite artists are Gracie Abrams and Billie Eilish\n#Data Frames Code\n\n.merge()\n\n\n  File \"&lt;ipython-input-1-ed850fcc29c6&gt;\", line 1\n    .merge()\n    ^\nSyntaxError: invalid syntax\n\n\n\n\n#HW5\n\nimport pandas as pd\nimport seaborn as sns\n\n\nspotify = pd.read_csv('https://bcdanl.github.io/data/spotify_all.csv')\nspotify\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n0\n0\nThrowbacks\n0\nMissy Elliott\nLose Control (feat. Ciara & Fat Man Scoop)\n226863\nThe Cookbook\n\n\n1\n0\nThrowbacks\n1\nBritney Spears\nToxic\n198800\nIn The Zone\n\n\n2\n0\nThrowbacks\n2\nBeyoncé\nCrazy In Love\n235933\nDangerously In Love (Alben für die Ewigkeit)\n\n\n3\n0\nThrowbacks\n3\nJustin Timberlake\nRock Your Body\n267266\nJustified\n\n\n4\n0\nThrowbacks\n4\nShaggy\nIt Wasn't Me\n227600\nHot Shot\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n198000\n999998\n✝️\n6\nChris Tomlin\nWaterfall\n209573\nLove Ran Red\n\n\n198001\n999998\n✝️\n7\nChris Tomlin\nThe Roar\n220106\nLove Ran Red\n\n\n198002\n999998\n✝️\n8\nCrowder\nLift Your Head Weary Sinner (Chains)\n224666\nNeon Steeple\n\n\n198003\n999998\n✝️\n9\nChris Tomlin\nWe Fall Down\n280960\nHow Great Is Our God: The Essential Collection\n\n\n198004\n999998\n✝️\n10\nCaleb and Kelsey\n10,000 Reasons / What a Beautiful Name\n178189\n10,000 Reasons / What a Beautiful Name\n\n\n\n\n198005 rows × 7 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n#Use pandas to identify the ten artists with the most tracks\nspotify['track_count'] = spotify.groupby('artist_name')['track_name'].transform('nunique')\n\n\ntop_10_artists = (\n    spotify[['artist_name', 'track_count']]\n    .drop_duplicates()\n    .sort_values(by='track_count', ascending=False)\n    .head(10)\n)\n\nprint(top_10_artists)\n\n                    artist_name  track_count\n458                 The Beatles          235\n3359                  Glee Cast          227\n475    Electric Light Orchestra          173\n818                   Pearl Jam          170\n46245                 Brian Eno          144\n5342              Michael Bublé          137\n2021             Tegan and Sara          137\n522                       Drake          135\n869                  John Mayer          133\n1025            Hillsong United          125\n\n\n\nsns.barplot(data = top_10_artists,\n              x =  'track_count',\n             hue = 'artist_name')\n\n\n\n\n\n\n\n\n#This bar chart distinguishes each artist by color and conveys the distribution of track counts"
  },
  {
    "objectID": "Danl_210_Project2.html",
    "href": "Danl_210_Project2.html",
    "title": "Ungrouped Descriptive Statistics for ESG Data",
    "section": "",
    "text": "---\ntitle: Project\nauthor: Will AKin\ndate: 2025-05-16\ncategories: [python, project] # tags for a blog post (e.g., python)\n\n\ntoc: true\n---\n\n#Title: ESG Data Analysis\n# This is formatted as code\n#Introduction:\n#Background\n\n#An ESG rating evaluates each company's overall risk to sustainablity measures.  Theses sustainablity measures include: long-term governmental, environmenta, and societal risks.\n#A company can analyze its ESG rating in order to make efficient revisions and conservable measures in order to reinforce sustainability.\n#Sustainability has become a significant portion of business, that promotes the efficiency of resource allegation.\n\n#Statement of the Problem: How does ESG rating differ between Countries and Sectors of businesses?\n\n#How does Average ESG rating differ between Sectors of businesses?\n#What business  3 Sectors have the top Controversy Levels?\n#How does each country contribute to ESG by business Sector?\n\n#Data Collection\n\n#One can collect data through Anaconda, utilizing Spyder.\n\n\n#To scrape websites using Selenium, one should first provide import statements being utilized throughout the code.\n\n#Next, One should utilize driver to open the designated url and scrape the data from Chrome\n\n#Once the webpage is intitialized, utilized find_elements to extract data points.  One can find elements by name, class name, tagname, XPath, id, link text, partial link text, or css selector.\n\n#One should then create a for loop incorporatind find_elements to scrap elements into a data frame\n\n#After scraping is complete, one should merge or concat the data frames into one.\n\n#One should additionally clean data frame for proper analysis\n\n#Descriptive Statistics\n\nimport pandas as pd\nimport seaborn as sns\nurl_2024 = \"https://bcdanl.github.io/data/esg_proj_2024_data.csv\"\nesg_proj_2024_data = pd.read_csv(url_2024)\n\n\nurl = \"https://bcdanl.github.io/data/stock_history_2023.csv\"\nstock_history_2023 = pd.read_csv(url)\n\n\nUngrouped Descriptive Statistics for ESG Data\n\noverall_stats_esg = esg_proj_2024_data.describe()\noverall_stats_esg\n\n\n  \n    \n\n\n\n\n\n\nYear\nMarket_Cap\nIPO_Year\nTotal_ESG\nEnvironmental\nSocial\nGovernance\nControversy\n\n\n\n\ncount\n625.0\n6.250000e+02\n201.000000\n625.000000\n602.000000\n602.000000\n602.000000\n573.000000\n\n\nmean\n2024.0\n7.244169e+10\n2000.179104\n21.567040\n5.747342\n9.017774\n6.819103\n1.942408\n\n\nstd\n0.0\n2.286855e+11\n12.697549\n7.041637\n5.200518\n3.567490\n2.371114\n0.801113\n\n\nmin\n2024.0\n1.986640e+08\n1925.000000\n6.400000\n0.000000\n0.800000\n2.400000\n0.000000\n\n\n25%\n2024.0\n1.117340e+10\n1994.000000\n16.300000\n1.800000\n6.700000\n5.225000\n1.000000\n\n\n50%\n2024.0\n2.439046e+10\n2000.000000\n21.100000\n3.950000\n8.900000\n6.300000\n2.000000\n\n\n75%\n2024.0\n5.961247e+10\n2009.000000\n26.000000\n8.875000\n11.175000\n7.900000\n2.000000\n\n\nmax\n2024.0\n3.019130e+12\n2022.000000\n52.000000\n25.300000\n22.500000\n19.400000\n5.000000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n#Grouped Descriptive Statistics for ESG Data\n\ngrouped_stats_esg = esg_proj_2024_data.groupby('Sector').describe()\ngrouped_stats_esg\n\n\n  \n    \n\n\n\n\n\n\nYear\nMarket_Cap\n...\nGovernance\nControversy\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\ncount\nmean\n...\n75%\nmax\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nSector\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBasic Materials\n8.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n8.0\n4.152917e+10\n...\n6.025\n7.5\n7.0\n2.714286\n1.112697\n1.0\n2.00\n3.0\n3.50\n4.0\n\n\nConsumer Discretionary\n152.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n152.0\n6.275165e+10\n...\n6.700\n10.6\n147.0\n1.972789\n0.661521\n0.0\n2.00\n2.0\n2.00\n4.0\n\n\nConsumer Staples\n22.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n22.0\n5.256891e+10\n...\n5.575\n9.5\n22.0\n2.590909\n0.590326\n2.0\n2.00\n3.0\n3.00\n4.0\n\n\nEnergy\n25.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n25.0\n7.331996e+10\n...\n7.975\n10.4\n24.0\n2.041667\n0.750604\n1.0\n1.75\n2.0\n3.00\n3.0\n\n\nFinance\n95.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n95.0\n4.896501e+10\n...\n11.775\n19.4\n90.0\n1.800000\n0.796058\n1.0\n1.00\n2.0\n2.00\n5.0\n\n\nHealth Care\n57.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n57.0\n8.558134e+10\n...\n8.425\n11.6\n57.0\n2.245614\n0.851064\n1.0\n2.00\n2.0\n3.00\n5.0\n\n\nIndustrials\n95.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n95.0\n3.620958e+10\n...\n7.100\n10.3\n83.0\n1.891566\n0.811684\n0.0\n1.00\n2.0\n2.00\n4.0\n\n\nReal Estate\n42.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n42.0\n2.315503e+10\n...\n6.300\n10.1\n28.0\n1.142857\n0.448395\n0.0\n1.00\n1.0\n1.00\n2.0\n\n\nTechnology\n71.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n71.0\n2.263839e+11\n...\n6.600\n11.5\n59.0\n1.745763\n0.842681\n0.0\n1.00\n2.0\n2.00\n4.0\n\n\nTelecommunications\n16.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n16.0\n6.773631e+10\n...\n7.400\n8.8\n16.0\n2.000000\n0.730297\n1.0\n1.75\n2.0\n2.25\n3.0\n\n\nUtilities\n42.0\n2024.0\n0.0\n2024.0\n2024.0\n2024.0\n2024.0\n2024.0\n42.0\n3.135210e+10\n...\n5.700\n7.3\n40.0\n2.100000\n0.841244\n1.0\n2.00\n2.0\n2.00\n5.0\n\n\n\n\n11 rows × 64 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=esg_proj_2024_data, x='Sector', hue='Sector', bins=20, multiple='stack')\nplt.title('ESG Score Distribution by Sector (Histogram)')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\nUngrouped Descriptive Statistics for Stock Data\n\noverall_stats_stock = stock_history_2023.describe()\noverall_stats_stock\n\n\n  \n    \n\n\n\n\n\n\nYear\nOpen\nHigh\nLow\nClose\nVolume\nDividend\nStock_Splits\n\n\n\n\ncount\n157750.0\n157750.000000\n157750.000000\n157750.000000\n157750.000000\n1.577500e+05\n157750.000000\n157750.000000\n\n\nmean\n2023.0\n138.386432\n139.868734\n136.982792\n138.463043\n4.831341e+06\n0.008351\n0.000121\n\n\nstd\n0.0\n303.569315\n306.850465\n300.707721\n303.837231\n2.183286e+07\n0.134062\n0.013334\n\n\nmin\n2023.0\n1.030000\n1.060000\n0.780000\n0.980000\n0.000000e+00\n0.000000\n0.000000\n\n\n25%\n2023.0\n39.326417\n39.799928\n38.896336\n39.342437\n8.251000e+05\n0.000000\n0.000000\n\n\n50%\n2023.0\n79.447571\n80.300088\n78.523761\n79.422333\n1.694200e+06\n0.000000\n0.000000\n\n\n75%\n2023.0\n146.473485\n147.876977\n144.995217\n146.545551\n3.867075e+06\n0.000000\n0.000000\n\n\nmax\n2023.0\n7028.500000\n7075.000000\n6997.910156\n7024.819824\n1.543911e+09\n35.000000\n2.000000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n#Grouped Descriptive Statistics for Stock Data\n\ngrouped_stats_stock = stock_history_2023.groupby('Stock_Splits').describe()\ngrouped_stats_stock\n\n\n  \n    \n\n\n\n\n\n\nYear\nOpen\n...\nVolume\nDividend\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\ncount\nmean\n...\n75%\nmax\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nStock_Splits\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0.000\n157736.0\n2023.0\n0.0\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n157736.0\n138.392003\n...\n3866958.0\n1.543911e+09\n157736.0\n0.008322\n0.133513\n0.000\n0.000\n0.000\n0.000\n35.000\n\n\n0.963\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n128.777257\n...\n356400.0\n3.564000e+05\n1.0\n4.845000\nNaN\n4.845\n4.845\n4.845\n4.845\n4.845\n\n\n1.021\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n51.747517\n...\n1800700.0\n1.800700e+06\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n1.046\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n36.780717\n...\n1535500.0\n1.535500e+06\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n1.065\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n53.657972\n...\n7357100.0\n7.357100e+06\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n1.128\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n217.839992\n...\n6387700.0\n6.387700e+06\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n1.136\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n43.672893\n...\n4326600.0\n4.326600e+06\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n1.164\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n202.701564\n...\n998900.0\n9.989000e+05\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n1.281\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n54.164016\n...\n21031104.0\n2.103110e+07\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n1.385\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n25.075378\n...\n6372400.0\n6.372400e+06\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n1.457\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n10.866301\n...\n10459795.0\n1.045980e+07\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n1.500\n1.0\n2023.0\nNaN\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n1.0\n69.574287\n...\n3029700.0\n3.029700e+06\n1.0\n0.000000\nNaN\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n2.000\n3.0\n2023.0\n0.0\n2023.0\n2023.0\n2023.0\n2023.0\n2023.0\n3.0\n54.623190\n...\n3262950.0\n3.608500e+06\n3.0\n0.000000\n0.000000\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\n\n\n13 rows × 56 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=stock_history_2023, x='Stock_Splits', hue='Stock_Splits', bins=10, multiple='stack')\nplt.title('Distribution by Stock Splits (Histogram)')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n#Exploratory Data Analysis\n#How does Average ESG rating differ between Sectors of businesses?\n\ngra = esg_proj_2024_data.groupby('Sector').agg(\n    av_esg = (\"Total_ESG\", \"mean\")\n)\ngra\n\n\n  \n    \n\n\n\n\n\n\nav_esg\n\n\nSector\n\n\n\n\n\nBasic Materials\n21.750000\n\n\nConsumer Discretionary\n19.588158\n\n\nConsumer Staples\n26.359091\n\n\nEnergy\n32.788000\n\n\nFinance\n21.754737\n\n\nHealth Care\n22.815789\n\n\nIndustrials\n23.678947\n\n\nReal Estate\n13.880952\n\n\nTechnology\n18.129577\n\n\nTelecommunications\n20.406250\n\n\nUtilities\n26.547619\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nsns.set(style='whitegrid')\n\nsns.barplot(data=gra, x='Sector',\n            y='av_esg',\n            estimator='mean',\n            ci='sd',\n            hue = 'Sector')  # ci='sd' shows standard deviation bars\nplt.title('Average ESG Score by Sector')\nplt.xticks(rotation=45)  # rotate if sector names are long\nplt.tight_layout()\n\nFutureWarning: \n\nThe `ci` parameter is deprecated. Use `errorbar='sd'` for the same effect.\n\n  sns.barplot(data=gra, x='Sector',\n\n\n\n\n\n\n\n\n\n#When looking at the data by Sector, on average, Energy businesses obtain the highest ESG score. On the other hand, Real Estate businesses obtain the lowest average ESG Score.\n#What business 3 Sectors have the top Controversy Levels?\n\ncontroversy = esg_proj_2024_data.groupby('Sector')['Controversy'].max()\n\ntop_3_controversy_sectors = controversy.nlargest(3)\ntop_3_controversy_sectors\n\n\n\n\n\n\n\n\nControversy\n\n\nSector\n\n\n\n\n\nFinance\n5.0\n\n\nHealth Care\n5.0\n\n\nUtilities\n5.0\n\n\n\n\ndtype: float64\n\n\n\ncontroversy_df = controversy.reset_index()\n\nsns.barplot(data=controversy_df,\n            x='Sector',\n            y='Controversy',\n            hue = 'Sector')\nplt.title('Maximum Controversy by Sector') # Added a title for clarity\nplt.xticks(rotation=45)  # rotate if sector names are long\nplt.tight_layout()\nplt.show() # Added plt.show() to display the plot\n\n\n\n\n\n\n\n\n#The Top 3 business sectors with the highest Controversery ratings are Finanance, Health Care, and Utilities.\n#How does each country contribute to ESG by business Sector?\n\ncountry = esg_proj_2024_data.groupby(['Country', 'Sector']).size()\ncountry\n\n\n\n\n\n\n\n\n\n0\n\n\nCountry\nSector\n\n\n\n\n\nBermuda\nConsumer Discretionary\n1\n\n\nFinance\n5\n\n\nCanada\nBasic Materials\n4\n\n\nConsumer Discretionary\n5\n\n\nConsumer Staples\n1\n\n\nEnergy\n6\n\n\nFinance\n7\n\n\nHealth Care\n1\n\n\nIndustrials\n4\n\n\nReal Estate\n1\n\n\nTechnology\n1\n\n\nTelecommunications\n3\n\n\nUtilities\n3\n\n\nCayman Islands\nHealth Care\n1\n\n\nChina\nConsumer Discretionary\n2\n\n\nReal Estate\n2\n\n\nTechnology\n1\n\n\nFrance\nEnergy\n1\n\n\nGermany\nFinance\n1\n\n\nGuernsey\nTechnology\n1\n\n\nHong Kong\nConsumer Discretionary\n2\n\n\nIreland\nConsumer Discretionary\n1\n\n\nHealth Care\n1\n\n\nIndustrials\n1\n\n\nTechnology\n3\n\n\nIsrael\nIndustrials\n1\n\n\nTechnology\n1\n\n\nItaly\nConsumer Discretionary\n1\n\n\nNetherlands\nConsumer Discretionary\n1\n\n\nHealth Care\n1\n\n\nIndustrials\n2\n\n\nTechnology\n1\n\n\nPeru\nFinance\n1\n\n\nSingapore\nTechnology\n1\n\n\nSpain\nTelecommunications\n1\n\n\nSweden\nConsumer Discretionary\n1\n\n\nSwitzerland\nEnergy\n1\n\n\nFinance\n1\n\n\nIndustrials\n4\n\n\nUnited Kingdom\nConsumer Discretionary\n1\n\n\nFinance\n1\n\n\nTelecommunications\n1\n\n\nUnited States\nBasic Materials\n4\n\n\nConsumer Discretionary\n136\n\n\nConsumer Staples\n21\n\n\nEnergy\n17\n\n\nFinance\n78\n\n\nHealth Care\n53\n\n\nIndustrials\n83\n\n\nReal Estate\n39\n\n\nTechnology\n62\n\n\nTelecommunications\n11\n\n\nUtilities\n39\n\n\n\n\ndtype: int64\n\n\n\ncountry = esg_proj_2024_data.groupby(['Country', 'Sector']).size().reset_index(name='Count')\n\nplt.figure(figsize=(12, 6))\nsns.barplot(data=country,\n            x='Sector',\n            y='Count',\n            hue='Country')\n\nplt.title('Observations per Country by Sector')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n#As shown by the graph, the United States contains the most businesses and businesses sectors across the data frame.\n#Signifigance of the Project\n#One can utilze these data findings to see on a global scale, which countries are contibuting most to high ESG. Additionally, one can further evalute which business sectors in each country need priortizing towards their ESG score.\n#References\n\n# Yahoo Finance  https://finance.yahoo.com/\n# Utilized Chatgpt to make graphs more appealing"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Will Akin",
    "section": "",
    "text": "Will Akin majors in Data Analytics at SUNY Geneseo. When not working on data analytics, Will enjoys spending time with friends and going to concerts."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Will Akin",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  B.S. in Data Analytics and B.A. in Sociomedical Science | Aug 2023 - May 2027"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Will Akin",
    "section": "Experience",
    "text": "Experience\nTarget Employee | Style Consultant | Feb 2024 -"
  },
  {
    "objectID": "danl_proj_nba_files/danl_proj_nba.html#salary-distribution-among-teams",
    "href": "danl_proj_nba_files/danl_proj_nba.html#salary-distribution-among-teams",
    "title": "Data Analysis Project",
    "section": "Salary Distribution Among Teams",
    "text": "Salary Distribution Among Teams\nLet’s start with the salary distribution among teams using seaborn for visualization. ​​\n\n\n# Handle missing values in 'Salary' by replacing them with the median salary\nmedian_salary = nba['Salary'].median()\nnba['Salary'].fillna(median_salary, inplace=True)\n\n/var/folders/_m/d6jf0jhd2zzdfd5kzdhl_24w0000gn/T/ipykernel_79892/1671011424.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  nba['Salary'].fillna(median_salary, inplace=True)\n\n\n\n# Set the aesthetic style of the plots\nsns.set_style(\"whitegrid\")\n\n# Calculate total salary by team\nteam_salary = (\n    nba\n    .groupby('Team')['Salary']\n    .sum()\n    .reset_index()\n    .sort_values(by='Salary', ascending=False)\n)\n\n# Plot total salary by team\nplt.figure(figsize=(10, 16))\nsns.barplot(data = team_salary,\n            x = 'Salary', y = 'Team',\n            palette = 'coolwarm')\nplt.title('Total Salary Distribution Among NBA Teams')\nplt.xlabel('Total Salary')\nplt.ylabel('Team')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\nThe visualization above displays the total salary distribution among NBA teams, with teams sorted by their total salary expenditure. This bar plot reveals which teams are the biggest spenders on player salaries and which are more conservative. The color gradient provides a visual cue to easily distinguish between the higher and lower spending teams.\nNotice that Portland Trail Blazers has the highest total salary followed by Golden State Warriors and Philadelphia 76ers, and Memphis Grizzlies has the lowest total salary."
  },
  {
    "objectID": "danl_proj_nba_files/danl_proj_nba.html#player-age-distribution",
    "href": "danl_proj_nba_files/danl_proj_nba.html#player-age-distribution",
    "title": "Data Analysis Project",
    "section": "Player Age Distribution",
    "text": "Player Age Distribution\nNext, let’s explore the Player Age Distribution across the NBA. We’ll create a histogram to visualize how player ages are distributed, which will help us understand if the league trends younger, older, or has a balanced age mix. ​​\n\n# Convert 'Birthday' column to datetime format\nfrom dateutil import parser\n# nba['Birthday'] = nba['Birthday'].apply(lambda x: parser.parse(x))\n\n# Now, let's calculate the age of each player\n# nba['Age'] = (datetime.now() - nba['Birthday']).dt.days // 365\n\n# Plot the age distribution of NBA players\nplt.figure(figsize=(10, 6))\nsns.histplot(nba['Age'],\n             bins = 15,\n             kde = True,\n             color = 'skyblue')\nplt.title('Age Distribution of NBA Players')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.show()\n\n\n/Users/bchoe/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\nThe histogram above shows the age distribution of NBA players, with a kernel density estimate (KDE) overlay to indicate the distribution shape. The plot helps identify the common ages for NBA players and whether there are significant numbers of very young or older players.\nNotice that the majority of players fall within an age range from 24 to 34. There are few players whose age is above 40."
  },
  {
    "objectID": "danl_proj_nba_files/danl_proj_nba.html#position-wise-salary-insights",
    "href": "danl_proj_nba_files/danl_proj_nba.html#position-wise-salary-insights",
    "title": "Data Analysis Project",
    "section": "Position-wise Salary Insights",
    "text": "Position-wise Salary Insights\nMoving on to Position-wise Salary Insights, we’ll examine how average salaries differ across player positions. This analysis could reveal which positions are typically higher-paid, potentially reflecting their value on the basketball court. Let’s create a box plot to visualize the salary distribution for each position. ​​\n\n# Plot salary distribution by player position\nplt.figure(figsize=(10, 6))\nsns.boxplot(data = nba,\n            x = 'Position', y = 'Salary',\n            palette = 'Set2')\nplt.title('Salary Distribution by Position')\nplt.xlabel('Position')\nplt.ylabel('Salary')\nplt.show()\n\n\n\n\n\n\n\n\nThe box plot above illustrates the salary distribution by player position, showcasing the variation in salaries among different positions within the NBA. PG-SG has the highest median salary."
  },
  {
    "objectID": "danl_proj_nba_files/danl_proj_nba.html#top-10-highest-paid-players",
    "href": "danl_proj_nba_files/danl_proj_nba.html#top-10-highest-paid-players",
    "title": "Data Analysis Project",
    "section": "Top 10 Highest Paid Players",
    "text": "Top 10 Highest Paid Players\nLastly, we’ll identify the Top 10 Highest Paid Players in the NBA. Let’s visualize this information.\n\n# Identify the top 10 highest paid players\ntop_10_salaries = nba.sort_values(by='Salary', ascending=False).head(10)\n\n# Plot the top 10 highest paid players\nplt.figure(figsize=(12, 8))\nsns.barplot(data = top_10_salaries,\n            x = 'Salary', y = 'PlayerName',\n            palette = 'viridis')\nplt.title('Top 10 Highest Paid NBA Players')\nplt.xlabel('Salary')\nplt.ylabel('Player')\nplt.show()\n\n\n\n\n\n\n\n\nThe bar plot above reveals the top 10 highest-paid NBA players, showcasing those who stand at the pinnacle of the league in terms of salary. This visualization not only highlights the star players who command the highest salaries but also may reflect their marketability, performance, and contribution to their respective teams."
  }
]